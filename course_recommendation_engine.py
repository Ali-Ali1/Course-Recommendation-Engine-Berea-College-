# -*- coding: utf-8 -*-
"""Course Recommendation Engine

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/174-IsJjHurb6ZjTLSeq5aqqNFN_eY7y2

#This Engine will recommend courses based on a course you like. 

The courses that the engine is built with are Offered at Berea College.

The Data that is used is gathered from:






*   https://www.berea.edu/academics/majors-minors/
*   https://www.bsu.edu/about/administrativeoffices/careercenter/tools-resources/personality-types
"""

import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity  
from sklearn.feature_extraction.text import CountVectorizer

pip install bs4

from google.colab import files
files.upload()

#Upload Individual Courses Data ...
df = pd.read_csv("Courses Data.csv")

df.head()

#Check the size of df ...
df.shape

#Upload Majors details Data ...
df2 = pd.read_csv("Major names, codes and desc.csv")

df2.head()

#Check the size of df2 ...
df2.shape

#Check if all the majors in df2 are in Courses Data(df) set ...
list_majors_df2 = pd.Series(df2['Majors'].values)
list_majors_df2

list_majors_df = list(list_majors_df)
list_majors_df2 = list(list_majors_df2)


compare = list_majors_df == list_majors_df2
compare

#Drop all the majors in df which are not in df2 ...
list_not_match = []

for item in list_majors_df:
  not_match = item not in list_majors_df2
  if not_match == True:
    #print(not_match, item)
    list_not_match.append(item)

list_not_match

list_of_all_indexes = []
for i in range(0, len(list_not_match)):
  list_of_all_indexes.append(list(df[df['Majors'] == list_not_match[i]].index))
list_of_all_indexes

flat_list = []
for sublist in list_of_all_indexes:
    for item in sublist:
        flat_list.append(item)

flat_list
len(flat_list)

for i in range(0, len(flat_list)):
  df = df.drop(flat_list[i])

#New df with all the majors and ONLY the majors in df2 ...
df.shape

#Merge the two Data Sets ...
df3 = df.merge(df2, how="inner")
df3 = df3.rename(columns={"Majors": "major", "Course Code": "code", "Major_name": "major name", "Course_Description": "course desc", "Desc":"major desc"})
df =df3

#Display the new Data set ...
df.head()

#Number of Rows and Columns ...
df.shape

#Drop Duplicates, if any ....
df.drop_duplicates()

#Check the length again ....
df.shape

#Check if all the Rows have data ...

df[df.notnull() == True].shape

"""It Appears that the data has no empty rows ...
The original Row count matches the notnull Row count
"""

#Upload the Career and Types Data set ...
df4 = pd.read_csv("CAREERS AND TYPES.csv")

#Display Career and Type Data Set ...
df4.head()

df4.shape

#Check for all the unique Majors in df4 ...
len(df4["Majors"].unique())

#Check for all the unique Majors in df Again!!! Just to be Sure...
len(df["major"].unique())

"""It Seems it has Data for some majors!!! So this will do for now ..."""

#Rename the columns of df4 to match df ...
df4 = df4.rename(columns={"Majors": "major", "Types": "type", "careers": "career"})
df4.head()

#Add the career Data to df ...
df = df.merge(df4, how='inner')

df.head()

#Check for the MBTI types of CSC Majors ...
df[df['major'] == 'CSC']['type'].unique()

"""**This is Fantastic!!!!!! It displays the MBTI types for Each Major and Each Course ....**"""

#Add Label, which sort of functions like a unique ID, to each Row ...
df['label'] = df.index
df

#Combine the Major and Code to create a column that hass the specific course tilte
df['course title'] = df['major']+ " "+df['code']
df.head(5)

#Chnage the order of columns to make it bit comfortable to make sense of ...
df= df[['label', 'course title', 'major name', 'course desc', 'type', 'career', ' major desc', 'major', 'code']]
df.head()

#Create a Column which contain all the import DATA points for each Course ...
df['features'] = df['major']+" "+df['course title']+" "+df['type']+" "+df['career']
df.head()

#Check out which Majors suit me !!!!!! ......
df[df['type'] == "INTJ"]['major'].unique()

#let's see which courses I might like in Computer Science !!!! ....
df[(df['type'] == "INTJ") & ( df['major']== "CSC")]['course title'].unique() # Seems Everything!!!

#Convert Features into metrix counts
df['features'] = df['features'].astype('U').values # unicode string ...

cv = CountVectorizer().fit_transform(df['features'])
cv.shape

cs = cosine_similarity(cv)

cs.shape

"""# **Finally, it Seems it is all set to recommend courses !!!!!!**

Ofcourse based on a course you have already liked ....
"""

#Pick a course title, CSC 236 ....
course = "CSC 226"

#Find the ID

course_id = df[df['course title'] == course]["label"].values[0]
course_id

#Create a list of results for cosine_similarity (Determines how similar this course is to others)
results = list(enumerate(cs[course_id]))
results

sort_results= sorted(results, key = lambda x: x[1], reverse=True) #sort the list
sort_results = sort_results[1:] #exclude itself !!!!!!!!!!
sort_results

print("Top 4 Recommend Courses for You after", course,":\n" )
counter = 0
for item in sort_results:
  course_title = df[df['label'] == item[0]]['course title'].values[0]
  print(j +1, course_title)
  counter= counter+1
  if counter > 3:
    break

"""# ***Built by Ali Ali ...***"""